---
apiVersion: v1
kind: ConfigMap
metadata:
  name: front-envoy
  namespace: default
data:
  envoy.yaml: >
    static_resources:
      listeners:
      - address:
          socket_address:
            address: 0.0.0.0
            port_value: 80 
        use_original_dst: true
        filter_chains:
        - filters:
          - name: envoy.http_connection_manager
            config:
              codec_type: auto
              stat_prefix: ingress_http
              generate_request_id: true
              access_log:
              - name: envoy.file_access_log
                config:
                  path: "/var/log/access.log"
              tracing:
                operation_name: egress
              stat_prefix: ingress_http
              route_config:
                name: local_route
                virtual_hosts:
                - name: service1
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/"
                    route:
                      cluster: service1
                    decorator:
                      operation: service1
              http_filters:
              - name: envoy.router
                config: {}
      clusters:
      - name: service1
        connect_timeout: 0.25s
        type: strict_dns
        lb_policy: round_robin
        http2_protocol_options: { }
        hosts: [{ socket_address: { address: service1, port_value: 8080 }}]
    admin:
      # Could be tailed with a sidecar container.
      access_log_path: "/var/log/admin-access.log"
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8001
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service1
  namespace: default
  labels:
    app: service1
spec:
  replicas: 3
  selector:
    matchLabels:
      app: service1
  template:
    metadata:
      labels:
        app: service1
        envoy: "true"
        exposed: "true"
        magiclabel: "true"
        team: product
        environment: production
        release: stable
    spec:
      containers:
      - name: service1
        image: us.gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:${CIRCLE_SHA1}

      restartPolicy: Always
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: front-envoy
    envoy: "true"
  name: front-envoy
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: front-envoy
  template:
    metadata:
      labels:
        app: front-envoy
        team: platform
        environment: production
        release: stable
        envoy: "true"
    spec:
      containers:
      - name: front-envoy
        image: envoyproxy/envoy
        command: ["envoy"]
        args: ["-c", "/etc/envoy.yaml", "--service-cluster", "$(POD_NAME)"]
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        volumeMounts:
        - name: envoy-yaml
          mountPath: /etc/envoy.yaml
          subPath: envoy.yaml
      volumes:
      - name: envoy-yaml
        configMap:
          name: front-envoy

      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: front-envoy
  namespace: default
spec:
  selector:
    app: front-envoy
  ports:
  - protocol: TCP
    port: 8001
    name: admin
  - protocol: TCP
    port: 80
    name: proxy
---
apiVersion: v1
kind: Service
metadata:
  name: service1
  namespace: default
spec:
  selector:
    app: service1
  ports:
  - protocol: TCP
    port: 8080
    targetPort: 8080
